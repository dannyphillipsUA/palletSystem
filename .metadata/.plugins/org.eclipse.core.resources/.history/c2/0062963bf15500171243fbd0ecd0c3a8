
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import Order;

/**
 * A dirty simple program that reads an Excel file.
 * 
 * @author www.codejava.net
 *
 */
public class FrontDesk {
	
	private static ArrayList<Order> orders = new ArrayList<Order>();
	private static Order order;

	public void run() throws IOException {
		String excelFilePath = "Daily Work.xlsx";
		FileInputStream inputStream = new FileInputStream(new File(excelFilePath));

		Workbook workbook = new XSSFWorkbook(inputStream);
		Sheet firstSheet = workbook.getSheetAt(0);
		Iterator<Row> iterator = firstSheet.iterator();
		Row nextRow = iterator.next();

		while (iterator.hasNext()) {
			String day = null;
			Date endDay = null;
			double charge = 20.00;
			nextRow = iterator.next();

			if (nextRow.getCell(1) == null) {
				break;
			}

			Cell customer = nextRow.getCell(1, nextRow.RETURN_BLANK_AS_NULL);
			Cell item = nextRow.getCell(2, nextRow.RETURN_BLANK_AS_NULL);
			Cell quantity = nextRow.getCell(3, nextRow.RETURN_BLANK_AS_NULL);
			Cell price = nextRow.getCell(4, nextRow.RETURN_BLANK_AS_NULL);
			Cell dueDate = nextRow.getCell(5, nextRow.RETURN_BLANK_AS_NULL);

			switch (customer.getCellType()) {
			case Cell.CELL_TYPE_STRING:

				if (nextRow.getCell(1) != null) {
					System.out.print(customer.getStringCellValue() + " ");
				}

				if (nextRow.getCell(2) != null) {
					System.out.print(item.getStringCellValue() + " ");
				}

				break;
			}

			switch (quantity.getCellType()) {
			case Cell.CELL_TYPE_NUMERIC:

				if (nextRow.getCell(3) != null) {
					System.out.print((int) quantity.getNumericCellValue() + " ");
				}

				if (nextRow.getCell(4) != null) {
					System.out.print(price.getNumericCellValue() + " ");
				}

				if (dueDate != null) {
					day = dueDate.getDateCellValue().getMonth() + "/" + dueDate.getDateCellValue().getDate()
							+ " ";
					System.out.print(day);
					endDay = toDate(day);
				}
				break;
			}
			
			System.out.println("");

			if (day != null && price != null) {
				order = new Order(customer.getStringCellValue(), item.getStringCellValue(), (int)quantity.getNumericCellValue(), price.getNumericCellValue(), endDay);
			}
			
			else if(price != null){
				order = new Order(customer.getStringCellValue(), item.getStringCellValue(), (int)quantity.getNumericCellValue(), price.getNumericCellValue(), endDay);
			}
			
			else if(day != null){
				order = new Order(customer.getStringCellValue(), item.getStringCellValue(), (int)quantity.getNumericCellValue(), charge, endDay);
			}
			
			else{
				order = new Order(customer.getStringCellValue(), item.getStringCellValue(), (int)quantity.getNumericCellValue(), charge, endDay);
			}
			
			orders.add(order);
		}

		workbook.close();
		inputStream.close();
	}

	private static Date toDate(String day) {
		DateFormat df = new SimpleDateFormat("MM/dd"); 
		Date startDate;
		try {
		    startDate = df.parse(day);
		    return startDate;
		} catch (ParseException e) {
		    e.printStackTrace();
		}
		
		return null;
	}

	public ArrayList<Order> getOrders() {
		
		return orders;
	}
}
